{"version":3,"sources":["InputColor.js"],"names":["React","View","Text","ColorPicker","fromHsv","isEmpty","connect","slug","findArrayName","InputColor","Component","constructor","props","state","value","props_name","name","String","onColorChange","bind","data","toUpperCase","setInput","setState","componentDidUpdate","prevProps","prevState","input","e","render","disabled","isReadonly","color","mapStateToProps","core","mapDispatchToProps","dispatch","key","val","type","payload"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { View, Text } from 'react-native';\r\n\r\nimport { ColorPicker, fromHsv } from 'react-native-color-picker';\r\n\r\nimport { isEmpty } from 'lodash';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { slug, findArrayName } from 'tcomponent';\r\n\r\nclass InputColor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: this.props.value,\r\n      props_name: this.props.name ? slug(String(this.props.name), '_') : '',\r\n    };\r\n\r\n    this.onColorChange = this.onColorChange.bind(this);\r\n  }\r\n\r\n  onColorChange(data) {\r\n    const value = fromHsv(data).toUpperCase();\r\n\r\n    this.props.setInput(this.state.props_name, value);\r\n\r\n    this.setState({ value });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    try {\r\n      if (\r\n        findArrayName(this.state.props_name, this.props.input) !=\r\n          findArrayName(this.state.props_name, prevProps.input) &&\r\n        findArrayName(this.state.props_name, this.props.input) !=\r\n          this.state.value\r\n      ) {\r\n        let value = this.props.input[this.state.props_name] || '';\r\n\r\n        this.setState({ value });\r\n      }\r\n    } catch (e) {}\r\n\r\n    if (this.props.value && prevProps.value != this.props.value) {\r\n      let value = this.props.value || '';\r\n\r\n      this.setState({ value });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.props.disabled || this.props.isReadonly) {\r\n      return (\r\n        <Text style={{ color: this.state.value }}>\r\n          {!isEmpty(this.state.value) && this.state.value}\r\n        </Text>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ColorPicker\r\n        {...this.props}\r\n        color={this.state.value}\r\n        onColorChange={this.onColorChange}\r\n        // onColorSelected={color => alert(`Color selected: ${color}`)}\r\n        //   onOldColorSelected={color => alert(`Old color selected: ${color}`)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  input: state.core.input || {},\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setInput: (key, val) =>\r\n    dispatch({\r\n      type: 'SET_INPUT',\r\n      payload: {\r\n        key: slug(String(key), '_'),\r\n        value: val,\r\n      },\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputColor);\r\n"]}